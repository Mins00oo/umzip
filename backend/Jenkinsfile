pipeline {
    agent any

    environment {
        REPO_URL = 'https://github.com/Mins00oo/umzip.git'
        BACKEND_DIR = 'backend'
        DOCKER_IMAGE = 'be-app' // Docker 이미지 이름
        CONTAINER_NAME = 'backend-application' // Docker 컨테이너 이름
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                          branches: [[name: 'main']],
                          userRemoteConfigs: [[url: "${REPO_URL}", credentialsId: 'accesstoken_username']]
                ])
                dir("${BACKEND_DIR}") {
                    echo "Moved to ${BACKEND_DIR} directory"
                }
            }
        }

        stage('Tests') {
            steps {
                dir("${BACKEND_DIR}") {
                    sh 'chmod +x ./gradlew'
                    sh './gradlew test'
                }
            }
        }

        stage('Build') {
            steps {
                dir("${BACKEND_DIR}") {
                    // application.yml 파일이 위치한 디렉토리로 이동
                    dir('src/main/resources') {
                        // 변수 치환
                        sh """
                        sed -i "s#\${DB_URL}#$DB_URL#" application.yml
                        sed -i "s#\${DB_USERNAME}#$DB_USERNAME#" application.yml
                        sed -i "s#\${DB_PASSWORD}#$DB_PASSWORD#" application.yml
                        sed -i "s#\${JWT_SECRET_KEY}#$JWT_SECRET_KEY#" application.yml
                        sed -i "s#\${JWT_ACCESS_EXPIRED_TIME_MS}#$JWT_ACCESS_EXPIRED_TIME_MS#" application.yml
                        sed -i "s#\${JWT_REFRESH_EXPIRED_TIME_MS}#$JWT_REFRESH_EXPIRED_TIME_MS#" application.yml
                        sed -i "s#\${S3_ACCESS_KEY}#$S3_ACCESS_KEY#" application.yml
                        sed -i "s#\${S3_SECRET_KEY}#$S3_SECRET_KEY#" application.yml
                        sed -i "s#\${S3_BUCKET}#$S3_BUCKET#" application.yml
                        sed -i "s#\${S3_REGION}#$S3_REGION#" application.yml
                        sed -i "s#\${REDIS_HOST}#$REDIS_HOST#" application.yml
                        sed -i "s#\${REDIS_PASSWORD}#$REDIS_PASSWORD#" application.yml
                        sed -i "s#\${COOL_SMS_API_KEY}#$COOL_SMS_API_KEY#" application.yml
                        sed -i "s#\${COOL_SMS_API_SECRET}#$COOL_SMS_API_SECRET#" application.yml
                        sed -i "s#\${BUSINESS_SERVICE_KEY}#$BUSINESS_SERVICE_KEY#" application.yml
                        sed -i "s#\${KAKAO_API_KEY}#$KAKAO_API_KEY#" application.yml
                        sed -i "s#\${FUEL_API_KEY}#$FUEL_API_KEY#" application.yml
                        sed -i "s#\${MONGO_URI}#$MONGO_URI#" application.yml
                        """
                    }
                    // 프로젝트 루트 디렉토리로 이동하여 빌드 수행
                    sh './gradlew clean build'
                }
            }
        }


        stage('Stop and Remove Existing Docker Container') {
            steps {
                // 기존 도커 컨테이너 중지 및 삭제
                script {
                    // 이미 실행 중인 컨테이너를 중지
                    sh """
                    if [ \$(docker ps -q -f name=${CONTAINER_NAME}) ]; then
                        echo "Stopping running container: ${CONTAINER_NAME}"
                        docker stop ${CONTAINER_NAME}
                    fi
                    """
                    // 컨테이너 삭제
                    sh """
                    if [ \$(docker ps -a -q -f name=${CONTAINER_NAME}) ]; then
                        echo "Removing container: ${CONTAINER_NAME}"
                        docker rm ${CONTAINER_NAME}
                    fi
                    """
                    // 기존 도커 이미지를 삭제
                    sh """
                    if [ \$(docker images -q ${DOCKER_IMAGE}) ]; then
                        echo "Removing image: ${DOCKER_IMAGE}"
                        docker rmi -f ${DOCKER_IMAGE}
                    fi
                    """
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                dir("${BACKEND_DIR}") {
                    sh """
                    echo "Building new Docker image: ${DOCKER_IMAGE}"
                    docker build -t ${DOCKER_IMAGE} .

                    echo "Running new Docker container: ${CONTAINER_NAME}"
                    docker run -d --name ${CONTAINER_NAME} -p 8080:8080 ${DOCKER_IMAGE}
                    """
                }
            }
        }
    }

    post {
        always {
            // 빌드 완료 후 결과 출력
            echo 'Pipeline has finished'
        }
        failure {
            // 빌드 실패 시 알림 (필요시 Slack 알림 등을 추가할 수 있음)
            echo 'Build failed'
        }
    }
}
