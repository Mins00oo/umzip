pipeline {
    agent any

    environment {
        REPO_URL = 'https://github.com/Mins00oo/umzip.git'
        BACKEND_DIR = 'backend'
        DOCKER_IMAGE = 'be-app' // Docker 이미지 이름
        CONTAINER_NAME = 'backend-application' // Docker 컨테이너 이름
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                          branches: [[name: 'main']],
                          userRemoteConfigs: [[url: "${REPO_URL}", credentialsId: 'accesstoken_username']]
                ])
                dir("${BACKEND_DIR}") {
                    echo "Moved to ${BACKEND_DIR} directory"
                }
            }
        }

        stage('Tests') {
            steps {
                dir("${BACKEND_DIR}") {
                    sh 'chmod +x ./gradlew'
                    sh './gradlew test'
                }
            }
        }


        stage('Build') {
            steps {
                dir("${BACKEND_DIR}") {
                    withCredentials([
                        string(credentialsId: 'DB_URL', variable: 'DB_URL'),
                        string(credentialsId: 'DB_USERNAME', variable: 'DB_USERNAME'),
                        string(credentialsId: 'DB_PASSWORD', variable: 'DB_PASSWORD'),
                        string(credentialsId: 'JWT_SECRET_KEY', variable: 'JWT_SECRET_KEY'),
                        string(credentialsId: 'JWT_ACCESS_EXPIRED_TIME_MS', variable: 'JWT_ACCESS_EXPIRED_TIME_MS'),
                        string(credentialsId: 'JWT_REFRESH_EXPIRED_TIME_MS', variable: 'JWT_REFRESH_EXPIRED_TIME_MS'),
                        string(credentialsId: 'S3_ACCESS_KEY', variable: 'S3_ACCESS_KEY'),
                        string(credentialsId: 'S3_SECRET_KEY', variable: 'S3_SECRET_KEY'),
                        string(credentialsId: 'S3_BUCKET', variable: 'S3_BUCKET'),
                        string(credentialsId: 'S3_REGION', variable: 'S3_REGION'),
                        string(credentialsId: 'REDIS_HOST', variable: 'REDIS_HOST'),
                        string(credentialsId: 'REDIS_PASSWORD', variable: 'REDIS_PASSWORD'),
                        string(credentialsId: 'COOL_SMS_API_KEY', variable: 'COOL_SMS_API_KEY'),
                        string(credentialsId: 'COOL_SMS_API_SECRET', variable: 'COOL_SMS_API_SECRET'),
                        string(credentialsId: 'BUSINESS_SERVICE_KEY', variable: 'BUSINESS_SERVICE_KEY'),
                        string(credentialsId: 'KAKAO_API_KEY', variable: 'KAKAO_API_KEY'),
                        string(credentialsId: 'FUEL_API_KEY', variable: 'FUEL_API_KEY'),
                        string(credentialsId: 'MONGO_URI', variable: 'MONGO_URI')
                    ]) {
                        // application.yml 파일이 위치한 디렉토리로 이동
                        // 다음과 같이 steps 내에서 사용하도록 변경
                        script {
                            echo "S3_ACCESS_KEY: ${S3_ACCESS_KEY}"
                            echo "S3_SECRET_KEY: ${S3_SECRET_KEY}"
                            echo "S3_BUCKET: ${S3_BUCKET}"
                            echo "S3_REGION: ${S3_REGION}"
                        }

                        dir('src/main/resources') {
                            // 변수 치환
                            sh """
                            sed -i 's#\\\${DB_URL}#${DB_URL}#g' application.yml
                            sed -i 's#\\\${DB_USERNAME}#${DB_USERNAME}#g' application.yml
                            sed -i 's#\\\${DB_PASSWORD}#${DB_PASSWORD}#g' application.yml
                            sed -i 's#\\\${JWT_SECRET_KEY}#${JWT_SECRET_KEY}#g' application.yml
                            sed -i 's#\\\${JWT_ACCESS_EXPIRED_TIME_MS}#${JWT_ACCESS_EXPIRED_TIME_MS}#g' application.yml
                            sed -i 's#\\\${JWT_REFRESH_EXPIRED_TIME_MS}#${JWT_REFRESH_EXPIRED_TIME_MS}#g' application.yml
                            sed -i 's#\\\${S3_ACCESS_KEY}#${S3_ACCESS_KEY}#g' application.yml
                            sed -i 's#\\\${S3_SECRET_KEY}#${S3_SECRET_KEY}#g' application.yml
                            sed -i 's#\\\${S3_BUCKET}#${S3_BUCKET}#g' application.yml
                            sed -i 's#\\\${S3_REGION}#${S3_REGION}#g' application.yml
                            sed -i 's#\\\${REDIS_HOST}#${REDIS_HOST}#g' application.yml
                            sed -i 's#\\\${REDIS_PASSWORD}#${REDIS_PASSWORD}#g' application.yml
                            sed -i 's#\\\${COOL_SMS_API_KEY}#${COOL_SMS_API_KEY}#g' application.yml
                            sed -i 's#\\\${COOL_SMS_API_SECRET}#${COOL_SMS_API_SECRET}#g' application.yml
                            sed -i 's#\\\${BUSINESS_SERVICE_KEY}#${BUSINESS_SERVICE_KEY}#g' application.yml
                            sed -i 's#\\\${KAKAO_API_KEY}#${KAKAO_API_KEY}#g' application.yml
                            sed -i 's#\\\${FUEL_API_KEY}#${FUEL_API_KEY}#g' application.yml
                            sed -i 's#\\\${MONGO_URI}#${MONGO_URI}#g' application.yml
                            """
                        }
                        // 프로젝트 루트 디렉토리로 이동하여 빌드 수행
                        sh './gradlew clean build'
                    }
                }
            }
        }


        stage('Stop and Remove Existing Docker Container') {
            steps {
                // 기존 도커 컨테이너 중지 및 삭제
                script {
                    // 이미 실행 중인 컨테이너를 중지
                    sh """
                    if [ \$(docker ps -q -f name=${CONTAINER_NAME}) ]; then
                        echo "Stopping running container: ${CONTAINER_NAME}"
                        docker stop ${CONTAINER_NAME}
                    fi
                    """
                    // 컨테이너 삭제
                    sh """
                    if [ \$(docker ps -a -q -f name=${CONTAINER_NAME}) ]; then
                        echo "Removing container: ${CONTAINER_NAME}"
                        docker rm ${CONTAINER_NAME}
                    fi
                    """
                    // 기존 도커 이미지를 삭제
                    sh """
                    if [ \$(docker images -q ${DOCKER_IMAGE}) ]; then
                        echo "Removing image: ${DOCKER_IMAGE}"
                        docker rmi -f ${DOCKER_IMAGE}
                    fi
                    """
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                dir("${BACKEND_DIR}") {
                    sh """
                    echo "Building new Docker image: ${DOCKER_IMAGE}"
                    docker build -t ${DOCKER_IMAGE} .

                    echo "Running new Docker container: ${CONTAINER_NAME}"
                    docker run -d --name ${CONTAINER_NAME} -p 8080:8080 ${DOCKER_IMAGE}
                    """
                }
            }
        }
    }
}
